{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thais Linda\\\\juscredit-web\\\\pages\\\\signup\\\\producer.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport RegisterForm from \"../../components/Register/RegisterForm\";\nimport { useState, useEffect } from \"react\";\nimport ConfirmationChoice from \"../../components/Register/ConfirmationChoice/ConfirmationChoice\";\nimport Confirmation from \"../../components/Register/Confirmation/Confirmation\";\nimport AddressForm from \"../../components/Register/AddressForm/AddressForm\";\nimport RegisterSuccess from \"../../components/Register/RegisterSuccess/RegisterSuccess\";\nimport { useRouter } from \"next/router\";\nimport ProducerNotFound from \"../../components/Register/ProducerNotFound/ProducerNotFound\";\n\nconst SignupProducer = () => {\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const {\n    0: userValues,\n    1: setUserValues\n  } = useState(null);\n  const {\n    0: confirmationChoice,\n    1: setConfirmationChoice\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: invalidCode,\n    1: setInvalid\n  } = useState(false);\n  const router = useRouter();\n  useEffect(() => {\n    if (router.query.notFound) {\n      setStep(-1);\n    }\n  }, [router.query]);\n\n  const handleUserSubmit = values => {\n    setUserValues(values);\n    setStep(1);\n  };\n\n  const handleConfimationChoice = async choice => {\n    setConfirmationChoice(choice);\n\n    try {\n      setLoading(true);\n      await sendConfirmation(choice);\n      setLoading(false);\n      setStep(2);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  const handleConfimation = async value => {\n    const {\n      email,\n      phone\n    } = userValues;\n    setLoading(true);\n\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/confirmation/verify`, {\n        method: 'POST',\n        body: JSON.stringify({\n          target: confirmationChoice === 'email' ? email : `+55${phone.replace(/\\D/g, '')}`,\n          code: value\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setLoading(false);\n\n      if (res.status === 200) {\n        setStep(3);\n      } else {\n        setInvalid(true);\n      }\n    } catch (e) {\n      setLoading(false);\n      console.log(e);\n    }\n  };\n\n  const sendConfirmation = async choice => {\n    const {\n      email,\n      phone\n    } = userValues;\n\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/confirmation/send-${choice}`, {\n        method: 'POST',\n        body: JSON.stringify(choice === 'email' ? {\n          email\n        } : {\n          phone: `+55${phone.replace(/\\D/g, '')}`\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status !== 200) {\n        throw res;\n      }\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  const createProducer = async body => {\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/produtores`, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await res.json();\n\n      if (res.status !== 200) {\n        throw res.json();\n      }\n\n      return data;\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  switch (step) {\n    case -1:\n      return __jsx(ProducerNotFound, {\n        onSubmit: () => setStep(0),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      });\n\n    case 0:\n      return __jsx(RegisterForm, {\n        profile: \"producer\",\n        onSubmit: handleUserSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n\n    case 1:\n      return __jsx(ConfirmationChoice, {\n        choice: confirmationChoice,\n        profile: \"producer\",\n        values: userValues,\n        onSubmit: handleConfimationChoice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      });\n\n    case 2:\n      return __jsx(Confirmation, {\n        onSendAgain: () => sendConfirmation(confirmationChoice),\n        invalid: invalidCode,\n        profile: \"producer\",\n        confirmationChoice: confirmationChoice,\n        onSubmit: handleConfimation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n\n    case 3:\n      return __jsx(AddressForm, {\n        profile: \"producer\",\n        loading: loading.toString(),\n        values: userValues,\n        onSubmit: handleAddressSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n\n    case 4:\n      return __jsx(RegisterSuccess, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n  }\n};\n\nexport default SignupProducer;","map":{"version":3,"sources":["C:/Users/Thais Linda/juscredit-web/pages/signup/producer.tsx"],"names":["RegisterForm","useState","useEffect","ConfirmationChoice","Confirmation","AddressForm","RegisterSuccess","useRouter","ProducerNotFound","SignupProducer","step","setStep","userValues","setUserValues","confirmationChoice","setConfirmationChoice","loading","setLoading","invalidCode","setInvalid","router","query","notFound","handleUserSubmit","values","handleConfimationChoice","choice","sendConfirmation","e","handleConfimation","value","email","phone","res","fetch","process","env","API_URL","method","body","JSON","stringify","target","replace","code","headers","status","console","log","createProducer","data","json","error","toString","handleAddressSubmit"],"mappings":"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","sourcesContent":["import RegisterForm from \"../../components/Register/RegisterForm\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ConfirmationChoice from \"../../components/Register/ConfirmationChoice/ConfirmationChoice\";\r\nimport Confirmation from \"../../components/Register/Confirmation/Confirmation\";\r\nimport AddressForm from \"../../components/Register/AddressForm/AddressForm\";\r\nimport RegisterSuccess from \"../../components/Register/RegisterSuccess/RegisterSuccess\";\r\nimport { useRouter } from \"next/router\";\r\nimport ProducerNotFound from \"../../components/Register/ProducerNotFound/ProducerNotFound\";\r\n\r\nconst SignupProducer = () => {\r\n    const [step, setStep] = useState(0)\r\n    const [userValues, setUserValues] = useState(null)\r\n    const [confirmationChoice, setConfirmationChoice] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [invalidCode, setInvalid] = useState(false);\r\n    const router = useRouter()\r\n\r\n\r\n    useEffect(() => {\r\n        if (router.query.notFound) {\r\n            setStep(-1);\r\n        }\r\n    }, [router.query])\r\n    const handleUserSubmit = (values) => {\r\n        setUserValues(values)\r\n        setStep(1)\r\n    }\r\n\r\n    const handleConfimationChoice = async (choice) => {\r\n        setConfirmationChoice(choice)\r\n        try {\r\n            setLoading(true)\r\n            await sendConfirmation(choice)\r\n            setLoading(false)\r\n            setStep(2)\r\n        } catch (e) {\r\n            setLoading(false)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const handleConfimation = async (value) => {\r\n        const { email, phone } = userValues;\r\n        setLoading(true)\r\n        try {\r\n            const res = await fetch(`${process.env.API_URL}/api/confirmation/verify`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(\r\n                        {\r\n                            target: confirmationChoice === 'email' ? email : `+55${phone.replace(/\\D/g, '')}`,\r\n                            code: value\r\n                        }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n\r\n                })\r\n            setLoading(false);\r\n            if (res.status === 200) {\r\n                setStep(3)\r\n            } else {\r\n                setInvalid(true);\r\n            }\r\n\r\n        } catch (e) {\r\n\r\n            setLoading(false);\r\n\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    \r\n  \r\n    const sendConfirmation = async (choice) => {\r\n        const { email, phone } = userValues\r\n        try {\r\n            const res = await fetch(`${process.env.API_URL}/api/confirmation/send-${choice}`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(\r\n                        choice === 'email' ? {\r\n                            email\r\n                        } : {\r\n                                phone: `+55${phone.replace(/\\D/g, '')}`\r\n                            }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n            if (res.status !== 200) {\r\n                throw res;\r\n            }\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    const createProducer = async (body) => {\r\n        try {\r\n            const res = await fetch(\r\n                `${process.env.API_URL}/api/produtores`,\r\n                {\r\n                    method: 'POST', body: JSON.stringify(body),\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                })\r\n            const data = await res.json();\r\n\r\n            if (res.status !== 200) {\r\n                throw res.json();\r\n            }\r\n            return data;\r\n        }\r\n        catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n    switch (step) {\r\n        case -1:\r\n            return <ProducerNotFound onSubmit={() => setStep(0)} />\r\n        case 0:\r\n            return <RegisterForm profile=\"producer\" onSubmit={handleUserSubmit} />\r\n        case 1:\r\n            return <ConfirmationChoice choice={confirmationChoice} profile=\"producer\" values={userValues} onSubmit={handleConfimationChoice} />\r\n        case 2:\r\n            return <Confirmation onSendAgain={() => sendConfirmation(confirmationChoice)} invalid={invalidCode} profile=\"producer\" confirmationChoice={confirmationChoice} onSubmit={handleConfimation} />\r\n        case 3:\r\n            return <AddressForm profile=\"producer\" loading={loading.toString()} values={userValues} onSubmit={handleAddressSubmit} />\r\n        case 4:\r\n            return <RegisterSuccess />\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default SignupProducer"]},"metadata":{},"sourceType":"module"}