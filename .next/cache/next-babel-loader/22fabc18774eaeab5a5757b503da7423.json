{"ast":null,"code":"export function validateCpf(value) {\n  let cpf = value.replace(/\\D/g, '');\n\n  if (!cpf) {\n    return false;\n  }\n\n  let numeros, digitos, soma, i, resultado, digitos_iguais;\n  digitos_iguais = 1;\n\n  if (cpf.length < 11) {\n    return false;\n  }\n\n  for (i = 0; i < cpf.length - 1; i++) {\n    if (cpf.charAt(i) != cpf.charAt(i + 1)) {\n      digitos_iguais = 0;\n      break;\n    }\n  }\n\n  if (!digitos_iguais) {\n    numeros = cpf.substring(0, 9);\n    digitos = cpf.substring(9);\n    soma = 0;\n\n    for (i = 10; i > 1; i--) {\n      soma += numeros.charAt(10 - i) * i;\n    }\n\n    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n\n    if (resultado != digitos.charAt(0)) {\n      return false;\n    }\n\n    numeros = cpf.substring(0, 10);\n    soma = 0;\n\n    for (i = 11; i > 1; i--) {\n      soma += numeros.charAt(11 - i) * i;\n    }\n\n    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n    return resultado != digitos.charAt(1) ? false : true;\n  } else {\n    return false;\n  }\n}\nexport function validateCnpj(cnpj) {\n  cnpj = cnpj.replace(/[^\\d]+/g, '');\n  if (cnpj == '') return false;\n  if (cnpj.length != 14) return false; // Elimina CNPJs invalidos conhecidos\n\n  if (cnpj == \"00000000000000\" || cnpj == \"11111111111111\" || cnpj == \"22222222222222\" || cnpj == \"33333333333333\" || cnpj == \"44444444444444\" || cnpj == \"55555555555555\" || cnpj == \"66666666666666\" || cnpj == \"77777777777777\" || cnpj == \"88888888888888\" || cnpj == \"99999999999999\") return false; // Valida DVs\n\n  let tamanho = cnpj.length - 2;\n  let numeros = cnpj.substring(0, tamanho);\n  let digitos = cnpj.substring(tamanho);\n  let soma = 0;\n  let pos = tamanho - 7;\n\n  for (let i = tamanho; i >= 1; i--) {\n    soma += numeros.charAt(tamanho - i) * pos--;\n    if (pos < 2) pos = 9;\n  }\n\n  let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n  if (resultado != digitos.charAt(0)) return false;\n  tamanho = tamanho + 1;\n  numeros = cnpj.substring(0, tamanho);\n  soma = 0;\n  pos = tamanho - 7;\n\n  for (let i = tamanho; i >= 1; i--) {\n    soma += numeros.charAt(tamanho - i) * pos--;\n    if (pos < 2) pos = 9;\n  }\n\n  resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\n  if (resultado != digitos.charAt(1)) return false;\n  return true;\n}\n;","map":{"version":3,"sources":["C:/Users/Thais Linda/juscredit-web/utils/validateDocuments.ts"],"names":["validateCpf","value","cpf","replace","numeros","digitos","soma","i","resultado","digitos_iguais","length","charAt","substring","validateCnpj","cnpj","tamanho","pos"],"mappings":"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","sourcesContent":["export function validateCpf(value: string) {\r\n    let cpf = value.replace(/\\D/g, '')\r\n    if (!cpf) {\r\n        return false;\r\n    }\r\n    let numeros, digitos, soma, i, resultado, digitos_iguais;\r\n    digitos_iguais = 1;\r\n    if (cpf.length < 11) {\r\n        return false;\r\n    }\r\n    for (i = 0; i < cpf.length - 1; i++) {\r\n        if (cpf.charAt(i) != cpf.charAt(i + 1)) {\r\n            digitos_iguais = 0;\r\n            break;     \r\n        }\r\n    }\r\n    if (!digitos_iguais) {\r\n        numeros = cpf.substring(0, 9);\r\n        digitos = cpf.substring(9);\r\n        soma = 0;\r\n        for (i = 10; i > 1; i--) {\r\n            soma += numeros.charAt(10 - i) * i;\r\n        }\r\n        resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n        if (resultado != digitos.charAt(0)) {\r\n            return false\r\n        }\r\n        numeros = cpf.substring(0, 10);\r\n        soma = 0;\r\n        for (i = 11; i > 1; i--) {\r\n            soma += numeros.charAt(11 - i) * i;\r\n        }\r\n        resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n\r\n\r\n        return (resultado != digitos.charAt(1)) ? false : true\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexport function validateCnpj(cnpj) {\r\n\r\n    cnpj = cnpj.replace(/[^\\d]+/g, '');\r\n\r\n    if (cnpj == '') return false;\r\n\r\n    if (cnpj.length != 14)\r\n        return false;\r\n\r\n    // Elimina CNPJs invalidos conhecidos\r\n    if (cnpj == \"00000000000000\" ||\r\n        cnpj == \"11111111111111\" ||\r\n        cnpj == \"22222222222222\" ||\r\n        cnpj == \"33333333333333\" ||\r\n        cnpj == \"44444444444444\" ||\r\n        cnpj == \"55555555555555\" ||\r\n        cnpj == \"66666666666666\" ||\r\n        cnpj == \"77777777777777\" ||\r\n        cnpj == \"88888888888888\" ||\r\n        cnpj == \"99999999999999\")\r\n        return false;\r\n\r\n    // Valida DVs\r\n    let tamanho = cnpj.length - 2\r\n    let numeros = cnpj.substring(0, tamanho);\r\n    let digitos = cnpj.substring(tamanho);\r\n    let soma = 0;\r\n    let pos = tamanho - 7;\r\n    for (let i = tamanho; i >= 1; i--) {\r\n        soma += numeros.charAt(tamanho - i) * pos--;\r\n        if (pos < 2)\r\n            pos = 9;\r\n    }\r\n    let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n    if (resultado != digitos.charAt(0))\r\n        return false;\r\n\r\n    tamanho = tamanho + 1;\r\n    numeros = cnpj.substring(0, tamanho);\r\n    soma = 0;\r\n    pos = tamanho - 7;\r\n    for (let i = tamanho; i >= 1; i--) {\r\n        soma += numeros.charAt(tamanho - i) * pos--;\r\n        if (pos < 2)\r\n            pos = 9;\r\n    }\r\n    resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;\r\n    if (resultado != digitos.charAt(1))\r\n        return false;\r\n\r\n    return true;\r\n\r\n};"]},"metadata":{},"sourceType":"module"}