{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport RegisterForm from \"../../../components/Register/RegisterForm\";\nimport { useState } from \"react\";\nimport ConfirmationChoice from \"../../../components/Register/ConfirmationChoice/ConfirmationChoice\";\nimport Confirmation from \"../../../components/Register/Confirmation/Confirmation\";\nimport AddressForm from \"../../../components/Register/AddressForm/AddressForm\";\nimport RegisterSuccess from \"../../../components/Register/RegisterSuccess/RegisterSuccess\";\nimport fetch from 'isomorphic-unfetch';\nimport ProducerFound from \"../../../components/Register/ProducerFound/ProducerFound\";\n\nconst UpdateProducer = ({\n  data\n}) => {\n  const {\n    id: producerId\n  } = data;\n  const {\n    0: step,\n    1: setStep\n  } = useState(-1);\n  const {\n    0: userValues,\n    1: setUserValues\n  } = useState(null);\n  const {\n    0: confirmationChoice,\n    1: setConfirmationChoice\n  } = useState(null);\n  const {\n    0: invalidCode,\n    1: setInvalid\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const handleUserSubmit = values => {\n    setUserValues(values);\n    setStep(1);\n  };\n\n  const handleConfimationChoice = async choice => {\n    setConfirmationChoice(choice);\n\n    try {\n      setLoading(true);\n      await sendConfirmation(choice);\n      setLoading(false);\n      setStep(2);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  const handleConfimation = async value => {\n    const {\n      email,\n      phone\n    } = userValues;\n    setLoading(true);\n\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/confirmation/verify`, {\n        method: 'POST',\n        body: JSON.stringify({\n          target: confirmationChoice === 'email' ? email : `+55${phone.replace(/\\D/g, '')}`,\n          code: value\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setLoading(false);\n\n      if (res.status === 200) {\n        setStep(3);\n      } else {\n        setInvalid(true);\n      }\n    } catch (e) {\n      setLoading(false);\n      console.log(e);\n    }\n  };\n\n  const sendConfirmation = async choice => {\n    const {\n      email,\n      phone\n    } = userValues;\n\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/confirmation/send-${choice}`, {\n        method: 'POST',\n        body: JSON.stringify(choice === 'email' ? {\n          email\n        } : {\n          phone: `+55${phone.replace(/\\D/g, '')}`\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status !== 200) {\n        throw res;\n      }\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  const handleAddressSubmit = async values => {\n    setLoading(true);\n    const addressString = `${values.address}, ${values.number}, ${values.city}, ${values.state}`;\n    const res = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${addressString}&key=AIzaSyD9birqocIzncUHjXSWIrx67UAT865gp84`);\n    const data = await res.json();\n    const {\n      lat,\n      lng\n    } = data.results[0].geometry.location;\n\n    if (res.status === 200) {\n      await updateProducer(_objectSpread(_objectSpread({\n        zipcode: values.zipcode,\n        address: `${values.address}, ${values.number}`,\n        city: values.city,\n        state: values.state,\n        country: 'BR'\n      }, userValues), {}, {\n        latitude: lat,\n        longitude: lng\n      }));\n      document.cookie = `lead=${true}; path=/`;\n      setStep(4);\n    } else {\n      setInvalid(true);\n    }\n  };\n\n  const updateProducer = async body => {\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/produtores/${producerId}`, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await res.json();\n      return data;\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  switch (step) {\n    case -1:\n      return __jsx(ProducerFound, {\n        producer: data,\n        onSubmit: () => setStep(0)\n      });\n\n    case 0:\n      return __jsx(RegisterForm, {\n        profile: \"update-producer\",\n        onSubmit: handleUserSubmit,\n        producer: data\n      });\n\n    case 1:\n      return __jsx(ConfirmationChoice, {\n        choice: confirmationChoice,\n        profile: \"producer\",\n        values: userValues,\n        onSubmit: handleConfimationChoice\n      });\n\n    case 2:\n      return __jsx(Confirmation, {\n        onSendAgain: () => sendConfirmation(confirmationChoice),\n        profile: \"producer\",\n        invalid: invalidCode,\n        confirmationChoice: confirmationChoice,\n        onSubmit: handleConfimation\n      });\n\n    case 3:\n      return __jsx(AddressForm, {\n        profile: \"producer\",\n        loading: loading.toString(),\n        values: userValues,\n        producer: data,\n        onSubmit: handleAddressSubmit\n      });\n\n    case 4:\n      return __jsx(RegisterSuccess, null);\n  }\n};\n\nUpdateProducer.getInitialProps = async ({\n  query\n}) => {\n  const {\n    id\n  } = query;\n  const res = await fetch(`${process.env.API_URL}/api/produtores/${id}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default UpdateProducer;","map":null,"metadata":{},"sourceType":"module"}