{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, Fragment } from \"react\";\nimport { mapStyleOptions, mapDefaultOptions } from \"./options\";\nimport './InteractiveMap.scss';\nimport dynamic from 'next/dynamic';\nimport PartnerPopup from \"./PartnerPopup/PartnerPopup\";\nimport StateDetails from \"./StateDetails/StateDetails\";\nimport PartnerAutoSuggest from \"./PartnerAutosuggest/PartnerAutoSuggest\";\nimport MarkerClusterer from '@google/markerclustererplus';\nconst OverlayViewContainer = dynamic(() => import('./OverlayViewContainer/OverlayViewContainer'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./OverlayViewContainer/OverlayViewContainer')],\n    modules: ['./OverlayViewContainer/OverlayViewContainer']\n  }\n});\n\nconst InteractiveMap = ({\n  data,\n  onFilterChange\n}) => {\n  let map;\n  const {\n    0: markers,\n    1: setMarkers\n  } = useState([]);\n  const {\n    0: mapRef,\n    1: setMapRef\n  } = useState(null);\n  const {\n    0: showingPartner,\n    1: setShowingPartner\n  } = useState(null);\n  const {\n    0: currentMarkerPosition,\n    1: setCurrentMarkerPosition\n  } = useState(null);\n  const {\n    0: entityType,\n    1: setEntityType\n  } = useState(null);\n  const {\n    0: productionScope,\n    1: setProductionScope\n  } = useState(null);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: selectedState,\n    1: setSelectedState\n  } = useState(null);\n  const {\n    0: features,\n    1: setFeatures\n  } = useState(null);\n  const {\n    0: selectedPartner,\n    1: setSelectedPartner\n  } = useState(null);\n  const {\n    0: clusters,\n    1: setClusters\n  } = useState([]);\n  useEffect(() => {\n    initMap();\n  }, []);\n  useEffect(() => {\n    if (selectedPartner) {\n      const instancedMap = map ? map : mapRef;\n      const marker = markers.find(marker => {\n        return marker.getTitle() === selectedPartner.fantasyName;\n      });\n\n      if (marker) {\n        instancedMap.setZoom(13);\n        instancedMap.setCenter(marker.getPosition());\n      }\n    }\n  }, [selectedPartner]);\n  useEffect(() => {\n    if (data) {\n      generateMarkers(data);\n    }\n  }, [data]);\n\n  const selectPartner = partner => {\n    setSelectedPartner(partner);\n  };\n\n  const clearMarkers = () => {\n    clusters.forEach(cluster => {\n      const clusterMarkers = cluster.getMarkers();\n      cluster.removeMarkers(clusterMarkers);\n      clusterMarkers.forEach(m => m.setMap(undefined));\n    });\n    setClusters([]);\n    markers.forEach(marker => marker.setMap(undefined));\n    setMarkers([]);\n  };\n\n  const generateMarkers = data => {\n    clearMarkers();\n    let newMarkers = {};\n    let allMarkers = [];\n    data.forEach(partner => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(partner.latitude, partner.longitude),\n        icon: `markers/${String(partner.entityType).toLowerCase() + (partner.certified ? '-certified' : '')}.svg`,\n        map,\n        clickable: true,\n        title: partner.fantasyName\n      });\n      marker.addListener('click', () => {\n        selectPartner(partner);\n        setShowingPartner(partner);\n      });\n      marker.addListener('mouseover', () => {\n        setCurrentMarkerPosition(marker.getPosition());\n        setShowingPartner(partner);\n      });\n      marker.setMap(loaded ? mapRef : map);\n\n      if (!newMarkers[partner.entityType]) {\n        newMarkers[partner.entityType] = [];\n      }\n\n      newMarkers[partner.entityType].push(marker);\n      allMarkers.push(marker);\n    });\n    let allClusters = [];\n    Object.keys(newMarkers).forEach(entityType => {\n      allClusters.push(new MarkerClusterer(loaded ? mapRef : map, newMarkers[entityType], {\n        imagePath: `/clusterers/${entityType.toLowerCase()}`,\n        styles: [{\n          height: 50,\n          width: 50,\n          url: `/clusterers/${entityType.toLowerCase()}1.png`,\n          textColor: 'white',\n          fontWeight: 'bold',\n          anchorText: [19, 1]\n        }, {\n          height: 50,\n          width: 50,\n          url: `/clusterers/${entityType.toLowerCase()}2.png`,\n          textColor: 'white',\n          fontWeight: 'bold',\n          anchorText: [19, 1]\n        }, {\n          height: 50,\n          width: 50,\n          url: `/clusterers/${entityType.toLowerCase()}3.png`,\n          textColor: 'white',\n          fontWeight: 'bold',\n          anchorText: [19, 1]\n        }, {\n          height: 78,\n          width: 77,\n          url: `/clusterers/${entityType.toLowerCase()}4.png`,\n          textColor: 'white',\n          fontWeight: 'bold',\n          anchorText: [19, 1]\n        }, {\n          height: 90,\n          width: 89,\n          url: `/clusterers/${entityType.toLowerCase()}5.png`,\n          textColor: 'white',\n          fontWeight: 'bold',\n          anchorText: [19, 1]\n        }]\n      }));\n    });\n    setClusters(allClusters);\n    setLoaded(true);\n    setMarkers(allMarkers);\n  };\n\n  const initMap = () => {\n    const mapType = new google.maps.StyledMapType(mapStyleOptions, {\n      name: \"Organis8\"\n    });\n    map = new google.maps.Map(document.getElementById('mapCanvas'), mapDefaultOptions(new google.maps.LatLng(-13.7017905, -59.6996757)));\n    setMapRef(map);\n    map.mapTypes.set('organisMap', mapType);\n    map.setMapTypeId('organisMap');\n  };\n\n  const selectState = async e => {\n    const state = e.target.value;\n    setSelectedState(state);\n    const map = mapRef;\n    const geoJson = await fetch(`/geoJSON/${state.toLowerCase()}.json`);\n    setFeatures(map.data.addGeoJson((await geoJson.json())));\n    map.data.setStyle({\n      fillColor: 'transparent  ',\n      strokeColor: '#6CB648',\n      strokeWeight: 2\n    });\n    map.setCenter(new google.maps.LatLng(-22.9549806, -51.0232348));\n    map.setZoom(7);\n  };\n\n  const handleEntityType = e => {\n    const filter = e.target.value === entityType ? null : e.target.value;\n    setEntityType(filter);\n    onFilterChange({\n      entityType: filter,\n      productionScope\n    });\n  };\n\n  const handleProductionScope = e => {\n    const filter = e.target.value === productionScope ? null : e.target.value;\n    setProductionScope(filter);\n    onFilterChange({\n      productionScope: filter,\n      entityType\n    });\n  };\n\n  const handleGoBack = () => {\n    const instancedMap = map ? map : mapRef;\n    setSelectedState(null);\n    instancedMap.data.remove(features[0]);\n    instancedMap.setZoom(5);\n    instancedMap.setCenter(new google.maps.LatLng(-13.7017905, -59.6996757));\n  };\n\n  const handlePopupRef = ref => {\n    if (ref) {\n      google.maps.OverlayView.preventMapHitsAndGesturesFrom(ref);\n    }\n  };\n\n  const handlePopupMouseLeave = () => {\n    setShowingPartner(null);\n  };\n\n  return __jsx(\"div\", {\n    className: \"interactive-map-container\"\n  }, __jsx(\"div\", {\n    className: \"find-partners-card\"\n  }, selectedState ? __jsx(StateDetails, {\n    stateDetail: selectState,\n    onGoBack: handleGoBack\n  }) : __jsx(Fragment, null, __jsx(PartnerAutoSuggest, {\n    partners: data,\n    onSelect: selectPartner\n  }), __jsx(\"h2\", null, \"Filtrar resultados por:\"), __jsx(\"div\", null, __jsx(\"div\", {\n    style: {\n      flexDirection: 'column',\n      display: 'flex'\n    }\n  }, __jsx(\"select\", {\n    className: \"state-select\",\n    onChange: selectState\n  }, __jsx(\"option\", null, \"Selecionar estado\"), __jsx(\"option\", {\n    value: \"SP\"\n  }, \"S\\xE3o Paulo\"))), __jsx(\"div\", {\n    style: {\n      flexDirection: 'column',\n      display: 'flex'\n    }\n  }, __jsx(\"strong\", null, \"Tipo de entidade\"), __jsx(\"div\", {\n    className: \"radio ocs\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleEntityType,\n    checked: entityType === \"OCS\",\n    value: \"OCS\"\n  }), __jsx(\"label\", null, \"OCS\"), __jsx(\"img\", {\n    src: \"/ocs.svg\"\n  })), __jsx(\"div\", {\n    className: \"radio opac\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleEntityType,\n    checked: entityType === \"CERT\",\n    value: \"CERT\"\n  }), __jsx(\"label\", null, \"CERT\"), __jsx(\"img\", {\n    src: \"/cert.svg\"\n  })), __jsx(\"div\", {\n    className: \"radio cert\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleEntityType,\n    checked: entityType === \"OPACS\",\n    value: \"OPACS\"\n  }), __jsx(\"label\", null, \"OPACS\"), __jsx(\"img\", {\n    src: \"/opacs.svg\"\n  }))), __jsx(\"div\", {\n    style: {\n      flexDirection: 'column',\n      display: 'flex',\n      marginTop: 16\n    }\n  }, __jsx(\"strong\", null, \"Escopo de produ\\xE7\\xE3o\"), __jsx(\"div\", {\n    className: \"radio\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleProductionScope,\n    checked: productionScope === \"EXT\",\n    value: \"EXT\"\n  }), __jsx(\"label\", null, __jsx(\"strong\", null, \"EXT\"), \" - Extrativismo\")), __jsx(\"div\", {\n    className: \"radio\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleProductionScope,\n    checked: productionScope === \"PPA\",\n    value: \"PPA\"\n  }), __jsx(\"label\", null, __jsx(\"strong\", null, \"PPA\"), \" - Produ\\xE7\\xE3o prim\\xE1ria animal\")), __jsx(\"div\", {\n    className: \"radio\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleProductionScope,\n    checked: productionScope === \"PPV\",\n    value: \"PPV\"\n  }), __jsx(\"label\", null, __jsx(\"strong\", null, \"PPV\"), \" - Produ\\xE7\\xE3o prim\\xE1ria vegetal\")), __jsx(\"div\", {\n    className: \"radio\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleProductionScope,\n    checked: productionScope === \"POA\",\n    value: \"POA\"\n  }), __jsx(\"label\", null, __jsx(\"strong\", null, \"POA\"), \" - Processamento animal\")), __jsx(\"div\", {\n    className: \"radio\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleProductionScope,\n    checked: productionScope === \"POV\",\n    value: \"POV\"\n  }), __jsx(\"label\", null, __jsx(\"strong\", null, \"POV\"), \" - Processamento vegetal\")), __jsx(\"div\", {\n    className: \"radio\"\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    onClick: handleProductionScope,\n    checked: productionScope === \"PIA\",\n    value: \"PIA\"\n  }), __jsx(\"label\", null, __jsx(\"strong\", null, \"PIA\"), \" - Insumos agr\\xEDcolas\")))))), __jsx(\"div\", {\n    id: \"mapCanvas\",\n    style: {\n      height: '749px'\n    }\n  }, mapRef && __jsx(OverlayViewContainer, {\n    map: mapRef,\n    selector: \"#overlay\",\n    position: currentMarkerPosition\n  }, showingPartner && __jsx(PartnerPopup, {\n    setRef: handlePopupRef,\n    onMouseLeave: handlePopupMouseLeave,\n    partner: showingPartner\n  }))));\n};\n\nexport default InteractiveMap;","map":null,"metadata":{},"sourceType":"module"}