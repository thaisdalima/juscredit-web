{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thais Linda\\\\juscredit-web\\\\pages\\\\cadastro\\\\investidor.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport RegisterForm from \"../../components/Register/RegisterForm\";\nimport { useState } from \"react\";\nimport ConfirmationChoice from \"../../components/Register/ConfirmationChoice/ConfirmationChoice\";\nimport Confirmation from \"../../components/Register/Confirmation/Confirmation\";\nimport RegisterSuccess from \"../../components/Register/RegisterSuccess/RegisterSuccess\";\n\nconst SignupUser = () => {\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const {\n    0: userValues,\n    1: setUserValues\n  } = useState(null);\n  const {\n    0: confirmationChoice,\n    1: setConfirmationChoice\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: invalidCode,\n    1: setInvalid\n  } = useState(false);\n\n  const handleUserSubmit = values => {\n    setUserValues(values);\n    setStep(1);\n  };\n\n  const handleConfimationChoice = async choice => {\n    setConfirmationChoice(choice);\n\n    try {\n      setLoading(true);\n      await sendConfirmation(choice);\n      setLoading(false);\n      setStep(2);\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  const sendConfirmation = async choice => {\n    const {\n      email,\n      phone\n    } = userValues;\n\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/confirmation/send-${choice}`, {\n        method: 'POST',\n        body: JSON.stringify(choice === 'email' ? {\n          email\n        } : {\n          phone: `+55${phone.replace(/\\D/g, '')}`\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status !== 200) {\n        throw res;\n      }\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  const handleConfimation = async value => {\n    const {\n      email,\n      phone\n    } = userValues;\n    setLoading(true);\n\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/confirmation/verify`, {\n        method: 'POST',\n        body: JSON.stringify({\n          target: confirmationChoice === 'email' ? email : `+55${phone.replace(/\\D/g, '')}`,\n          code: value\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (res.status === 200) {\n        await createUser(_objectSpread({}, userValues));\n        document.cookie = `lead=${true}; path=/`;\n        setStep(3);\n      } else {\n        setInvalid(true);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const createUser = async body => {\n    try {\n      const res = await fetch(`${process.env.API_URL}/api/nao_produtores`, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await res.json();\n      return data;\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  switch (step) {\n    case 0:\n      return __jsx(RegisterForm, {\n        profile: \"user\",\n        onSubmit: handleUserSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n\n    case 1:\n      return __jsx(ConfirmationChoice, {\n        choice: confirmationChoice,\n        profile: \"user\",\n        values: userValues,\n        onSubmit: handleConfimationChoice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n\n    case 2:\n      return __jsx(Confirmation, {\n        onSendAgain: () => sendConfirmation(confirmationChoice),\n        invalid: invalidCode,\n        loading: loading.toString(),\n        profile: \"user\",\n        confirmationChoice: confirmationChoice,\n        onSubmit: handleConfimation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n\n    case 3:\n      return __jsx(RegisterSuccess, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      });\n  }\n};\n\nexport default SignupUser;","map":{"version":3,"sources":["C:/Users/Thais Linda/juscredit-web/pages/cadastro/investidor.tsx"],"names":["RegisterForm","useState","ConfirmationChoice","Confirmation","RegisterSuccess","SignupUser","step","setStep","userValues","setUserValues","confirmationChoice","setConfirmationChoice","loading","setLoading","invalidCode","setInvalid","handleUserSubmit","values","handleConfimationChoice","choice","sendConfirmation","e","email","phone","res","fetch","process","env","API_URL","method","body","JSON","stringify","replace","headers","status","handleConfimation","value","target","code","createUser","document","cookie","console","log","data","json","error","toString"],"mappings":";;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,wCAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,kBAAP,MAA+B,iEAA/B;AACA,OAAOC,YAAP,MAAyB,qDAAzB;AACA,OAAOC,eAAP,MAA4B,2DAA5B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8BR,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAAA,OAACS,kBAAD;AAAA,OAAqBC;AAArB,MAA8CV,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACa,WAAD;AAAA,OAAcC;AAAd,MAA4Bd,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMe,gBAAgB,GAAIC,MAAD,IAAY;AACjCR,IAAAA,aAAa,CAACQ,MAAD,CAAb;AACAV,IAAAA,OAAO,CAAC,CAAD,CAAP;AACH,GAHD;;AAKA,QAAMW,uBAAuB,GAAG,MAAOC,MAAP,IAAkB;AAC9CR,IAAAA,qBAAqB,CAACQ,MAAD,CAArB;;AACA,QAAI;AACAN,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMO,gBAAgB,CAACD,MAAD,CAAtB;AACAN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAN,MAAAA,OAAO,CAAC,CAAD,CAAP;AACH,KALD,CAKE,OAAOc,CAAP,EAAU;AACRR,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEH;AAEJ,GAZD;;AAcA,QAAMO,gBAAgB,GAAG,MAAOD,MAAP,IAAkB;AACvC,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBf,UAAzB;;AACA,QAAI;AACA,YAAMgB,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,OAAQ,0BAAyBT,MAAO,EAAxD,EACnB;AACIU,QAAAA,MAAM,EAAE,MADZ;AAEIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACFb,MAAM,KAAK,OAAX,GAAqB;AACjBG,UAAAA;AADiB,SAArB,GAEI;AACIC,UAAAA,KAAK,EAAG,MAAKA,KAAK,CAACU,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAyB;AAD1C,SAHF,CAFV;AAQIC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AARb,OADmB,CAAvB;;AAaA,UAAIV,GAAG,CAACW,MAAJ,KAAe,GAAnB,EAAwB;AACpB,cAAMX,GAAN;AACH;AACJ,KAjBD,CAiBE,OAAOH,CAAP,EAAU;AACR,YAAMA,CAAN;AACH;AACJ,GAtBD;;AAwBA,QAAMe,iBAAiB,GAAG,MAAOC,KAAP,IAAiB;AAEvC,UAAM;AAAEf,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBf,UAAzB;AACAK,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,YAAMW,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,OAAQ,0BAAxB,EACnB;AACIC,QAAAA,MAAM,EAAE,MADZ;AAEIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACF;AACIM,UAAAA,MAAM,EAAE5B,kBAAkB,KAAK,OAAvB,GAAiCY,KAAjC,GAA0C,MAAKC,KAAK,CAACU,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAyB,EADpF;AAEIM,UAAAA,IAAI,EAAEF;AAFV,SADE,CAFV;AAOIH,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAPb,OADmB,CAAvB;;AAaA,UAAIV,GAAG,CAACW,MAAJ,KAAe,GAAnB,EAAwB;AACpB,cAAMK,UAAU,mBACThC,UADS,EAAhB;AAGAiC,QAAAA,QAAQ,CAACC,MAAT,GAAmB,QAAO,IAAK,UAA/B;AACAnC,QAAAA,OAAO,CAAC,CAAD,CAAP;AACH,OAND,MAMO;AACHQ,QAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AAIJ,KA1BD,CA0BE,OAAOM,CAAP,EAAU;AACRsB,MAAAA,OAAO,CAACC,GAAR,CAAYvB,CAAZ;AACH;AAEJ,GAlCD;;AAmCA,QAAMmB,UAAU,GAAG,MAAOV,IAAP,IAAgB;AAC/B,QAAI;AACA,YAAMN,GAAG,GAAG,MAAMC,KAAK,CAClB,GAAEC,OAAO,CAACC,GAAR,CAAYC,OAAQ,qBADJ,EAEnB;AACIC,QAAAA,MAAM,EAAE,MADZ;AACoBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf,CAD1B;AAEII,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAFb,OAFmB,CAAvB;AAMA,YAAMW,IAAI,GAAG,MAAMrB,GAAG,CAACsB,IAAJ,EAAnB;AACA,aAAOD,IAAP;AACH,KATD,CAUA,OAAOxB,CAAP,EAAU;AACNsB,MAAAA,OAAO,CAACI,KAAR,CAAc1B,CAAd;AACH;AACJ,GAdD;;AAgBA,UAAQf,IAAR;AAEI,SAAK,CAAL;AACI,aAAO,MAAC,YAAD;AAAc,QAAA,OAAO,EAAC,MAAtB;AAA6B,QAAA,QAAQ,EAAEU,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACJ,SAAK,CAAL;AACI,aAAO,MAAC,kBAAD;AAAoB,QAAA,MAAM,EAAEN,kBAA5B;AAAgD,QAAA,OAAO,EAAC,MAAxD;AAA+D,QAAA,MAAM,EAAEF,UAAvE;AAAmF,QAAA,QAAQ,EAAEU,uBAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACJ,SAAK,CAAL;AACI,aAAO,MAAC,YAAD;AAAc,QAAA,WAAW,EAAE,MAAME,gBAAgB,CAACV,kBAAD,CAAjD;AAAuE,QAAA,OAAO,EAAEI,WAAhF;AAA6F,QAAA,OAAO,EAAEF,OAAO,CAACoC,QAAR,EAAtG;AAA0H,QAAA,OAAO,EAAC,MAAlI;AAAyI,QAAA,kBAAkB,EAAEtC,kBAA7J;AAAiL,QAAA,QAAQ,EAAE0B,iBAA3L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;;AACJ,SAAK,CAAL;AACI,aAAO,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AATR;AAeH,CApHD;;AAqHA,eAAe/B,UAAf","sourcesContent":["import RegisterForm from \"../../components/Register/RegisterForm\";\r\nimport { useState } from \"react\";\r\nimport ConfirmationChoice from \"../../components/Register/ConfirmationChoice/ConfirmationChoice\";\r\nimport Confirmation from \"../../components/Register/Confirmation/Confirmation\";\r\nimport RegisterSuccess from \"../../components/Register/RegisterSuccess/RegisterSuccess\";\r\n\r\nconst SignupUser = () => {\r\n    const [step, setStep] = useState(0)\r\n    const [userValues, setUserValues] = useState(null)\r\n    const [confirmationChoice, setConfirmationChoice] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [invalidCode, setInvalid] = useState(false);\r\n\r\n    const handleUserSubmit = (values) => {\r\n        setUserValues(values)\r\n        setStep(1)\r\n    }\r\n\r\n    const handleConfimationChoice = async (choice) => {\r\n        setConfirmationChoice(choice)\r\n        try {\r\n            setLoading(true)\r\n            await sendConfirmation(choice)\r\n            setLoading(false)\r\n            setStep(2)\r\n        } catch (e) {\r\n            setLoading(false)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const sendConfirmation = async (choice) => {\r\n        const { email, phone } = userValues\r\n        try {\r\n            const res = await fetch(`${process.env.API_URL}/api/confirmation/send-${choice}`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(\r\n                        choice === 'email' ? {\r\n                            email\r\n                        } : {\r\n                                phone: `+55${phone.replace(/\\D/g, '')}`\r\n                            }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n            if (res.status !== 200) {\r\n                throw res;\r\n            }\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    const handleConfimation = async (value) => {\r\n\r\n        const { email, phone } = userValues;\r\n        setLoading(true)\r\n        try {\r\n            const res = await fetch(`${process.env.API_URL}/api/confirmation/verify`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(\r\n                        {\r\n                            target: confirmationChoice === 'email' ? email : `+55${phone.replace(/\\D/g, '')}`,\r\n                            code: value\r\n                        }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n\r\n                })\r\n            if (res.status === 200) {\r\n                await createUser({\r\n                    ...userValues\r\n                })\r\n                document.cookie = `lead=${true}; path=/`;\r\n                setStep(3)\r\n            } else {\r\n                setInvalid(true);\r\n            }\r\n\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n    const createUser = async (body) => {\r\n        try {\r\n            const res = await fetch(\r\n                `${process.env.API_URL}/api/nao_produtores`,\r\n                {\r\n                    method: 'POST', body: JSON.stringify(body),\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                })\r\n            const data = await res.json();\r\n            return data;\r\n        }\r\n        catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    switch (step) {\r\n\r\n        case 0:\r\n            return <RegisterForm profile=\"user\" onSubmit={handleUserSubmit} />\r\n        case 1:\r\n            return <ConfirmationChoice choice={confirmationChoice} profile=\"user\" values={userValues} onSubmit={handleConfimationChoice} />\r\n        case 2:\r\n            return <Confirmation onSendAgain={() => sendConfirmation(confirmationChoice)} invalid={invalidCode} loading={loading.toString()} profile=\"user\" confirmationChoice={confirmationChoice} onSubmit={handleConfimation} />\r\n        case 3:\r\n            return <RegisterSuccess />\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default SignupUser"]},"metadata":{},"sourceType":"module"}