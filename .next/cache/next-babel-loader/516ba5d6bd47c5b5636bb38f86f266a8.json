{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass CustomOverlayView extends window.google.maps.OverlayView {\n  constructor(props) {\n    super();\n\n    _defineProperty(this, \"position\", void 0);\n\n    _defineProperty(this, \"content\", void 0);\n\n    _defineProperty(this, \"containerDiv\", void 0);\n\n    _defineProperty(this, \"onAdd\", () => {\n      this.getPanes().floatPane.appendChild(this.containerDiv);\n    });\n\n    _defineProperty(this, \"onRemove\", () => {\n      this.content.parentElement.removeChild(this.content);\n    });\n\n    _defineProperty(this, \"draw\", () => {\n      const divPosition = this.getProjection().fromLatLngToDivPixel(this.position);\n      this.content.style.position = \"absolute\";\n      this.content.style.zIndex = 10;\n      this.content.style.left = divPosition.x - 35 + \"px\";\n      this.content.style.top = divPosition.y - 250 + \"px\";\n    });\n\n    this.position = props.position; // lat, lng position provided by map. This is where the popup is supposed to be rendered\n\n    this.content = props.content; // The HTML element to be rendered in the popup.\n    // Create and style the popup markup.\n\n    this.containerDiv = document.createElement(\"div\");\n    this.containerDiv.appendChild(this.content);\n  }\n  /** Called when the popup is added to the map. */\n\n\n}\n\nexport default CustomOverlayView;","map":null,"metadata":{},"sourceType":"module"}