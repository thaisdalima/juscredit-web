{"version":3,"file":"static/webpack/static\\development\\pages\\signup\\user.js.5dc35967fed801a6844f.hot-update.js","sources":["webpack:///./pages/signup/user.tsx"],"sourcesContent":["import RegisterForm from \"../../components/Register/RegisterForm\";\r\nimport { useState } from \"react\";\r\nimport ConfirmationChoice from \"../../components/Register/ConfirmationChoice/ConfirmationChoice\";\r\nimport Confirmation from \"../../components/Register/Confirmation/Confirmation\";\r\nimport RegisterSuccess from \"../../components/Register/RegisterSuccess/RegisterSuccess\";\r\n\r\nconst SignupUser = () => {\r\n    const [step, setStep] = useState(0)\r\n    const [userValues, setUserValues] = useState(null)\r\n    const [confirmationChoice, setConfirmationChoice] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [invalidCode, setInvalid] = useState(false);\r\n\r\n    const handleUserSubmit = (values) => {\r\n        setUserValues(values)\r\n        setStep(1)\r\n    }\r\n\r\n    const handleConfimationChoice = async (choice) => {\r\n        setConfirmationChoice(choice)\r\n        try {\r\n            setLoading(true)\r\n            await sendConfirmation(choice)\r\n            setLoading(false)\r\n            setStep(2)\r\n        } catch (e) {\r\n            setLoading(false)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const sendConfirmation = async (choice) => {\r\n        const { email, phone } = userValues\r\n        try {\r\n            await fetch(`${process.env.API_URL}/api/confirmation/send-${choice}`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(\r\n                        confirmationChoice === 'email' ? {\r\n                            email\r\n                        } : {\r\n                                phone: `+55${phone.replace(/\\D/g, '')}`\r\n                            }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    const handleConfimation = async (value) => {\r\n\r\n        const { email, phone } = userValues;\r\n        setLoading(true)\r\n        try {\r\n            const res = await fetch(`${process.env.API_URL}/api/confirmation/verify`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(\r\n                        {\r\n                            target: confirmationChoice === 'email' ? email : `+55${phone.replace(/\\D/g, '')}`,\r\n                            code: value\r\n                        }),\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n\r\n                })\r\n            if (res.status === 200) {\r\n                await createUser({\r\n                    ...userValues\r\n                })\r\n            } else {\r\n                setInvalid(true);\r\n            }\r\n\r\n            setStep(3)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n    const createUser = async (body) => {\r\n        try {\r\n            const res = await fetch(\r\n                `${process.env.API_URL}/api/nao_produtores`,\r\n                {\r\n                    method: 'POST', body: JSON.stringify(body),\r\n                    headers: { 'Content-Type': 'application/json' }\r\n                })\r\n            const data = await res.json();\r\n            return data;\r\n        }\r\n        catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    switch (step) {\r\n\r\n        case 0:\r\n            return <RegisterForm profile=\"user\" onSubmit={handleUserSubmit} />\r\n        case 1:\r\n            return <ConfirmationChoice choice={confirmationChoice} profile=\"user\" values={userValues} onSubmit={handleConfimationChoice} />\r\n        case 2:\r\n            return <Confirmation onSendAgain={() => sendConfirmation(confirmationChoice)} invalid={invalidCode} loading={loading.toString()} profile=\"user\" confirmationChoice={confirmationChoice} onSubmit={handleConfimation} />\r\n        case 3:\r\n            return <RegisterSuccess />\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default SignupUser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AACA;AAEA;AADA;AAGA;AADA;AAGA;AACA;AADA;AARA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AADA;AAPA;AACA;AAPA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAuBA;AACA;AAxBA;AA0BA;AA1BA;AAAA;AACA;AADA;AAAA;AAAA;AA6BA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAFA;AACA;AALA;AAEA;AAFA;AAAA;AACA;AADA;AAQA;AARA;AACA;AADA;AAAA;AAAA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAeA;AACA;AAAA;;;;;A","sourceRoot":""}